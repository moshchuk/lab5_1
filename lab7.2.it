#include <iostream>
#include <iomanip>
#include <ctime>
using namespace std;

// Функція для створення матриці з випадковими цілими числами
void Create(int** a, const int rows, const int cols, const int Low, const int High) {
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            a[i][j] = Low + rand() % (High - Low + 1);
}

// Функція для виведення матриці на екран
void Print(int** a, const int rows, const int cols) {
    cout << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++)
            cout << setw(4) << a[i][j];
        cout << endl;
    }
    cout << endl;
}

// Функція для пошуку найбільшого з мінімальних елементів по непарних рядках
bool FindMaxOfMinsInOddRows(int** a, const int rows, const int cols, int& maxOfMins) {
    maxOfMins = INT_MIN; // Ініціалізуємо як найменше можливе значення
    bool found = false;

    for (int i = 1; i < rows; i += 2) { // Перебираємо тільки непарні рядки
        int minInRow = INT_MAX; // Ініціалізуємо мінімальне значення в рядку

        for (int j = 0; j < cols; j++) {
            if (a[i][j] < minInRow) {
                minInRow = a[i][j]; // Знаходимо мінімальне значення в рядку
            }
        }

        if (minInRow > maxOfMins) {
            maxOfMins = minInRow; // Оновлюємо найбільше з мінімальних
            found = true;
        }
    }

    return found; // Повертаємо true, якщо знайдено хоча б одне непарне значення
}

int main() {
    srand(static_cast<unsigned>(time(NULL)));

    const int Low = 7; // Нижня межа значень
    const int High = 65; // Верхня межа значень
    int rows, cols;

    cout << "k: ";
    cin >> rows;
    cout << "n: ";
    cin >> cols;

    // Створення динамічної матриці
    int** a = new int* [rows];
    for (int i = 0; i < rows; i++)
        a[i] = new int[cols];

    Create(a, rows, cols, Low, High); // Створення матриці
    Print(a, rows, cols); // Виведення матриці

    int maxOfMins;
    if (FindMaxOfMinsInOddRows(a, rows, cols, maxOfMins))
        cout << "Max of min = " << maxOfMins << endl;
    else
        cout << "None found" << endl;

    // Очищення пам'яті
    for (int i = 0; i < rows; i++)
        delete[] a[i];
    delete[] a;

    return 0;
}
